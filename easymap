#!/bin/bash

set -euo pipefail  # Enable strict mode

# Input validation function
validate_input() {
    local input="$1"
    if [[ ! "$input" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        echo "Invalid input. Only alphanumeric characters, dots, underscores, and hyphens are allowed."
        return 1
    fi
    return 0
}

# IP/hostname validation function
validate_target() {
    local target="$1"
    # Allow IP addresses and hostnames
    if [[ ! "$target" =~ ^[a-zA-Z0-9.-]+$ ]]; then
        echo "Invalid target. Only alphanumeric characters, dots, and hyphens are allowed."
        return 1
    fi
    return 0
}

# Port range validation
validate_port_range() {
    local ports="$1"
    if [[ ! "$ports" =~ ^[0-9,-]+$ ]]; then
        echo "Invalid port range. Only numbers, commas, and hyphens are allowed."
        return 1
    fi
    return 0
}

# File path validation
validate_file_path() {
    local path="$1"
    # Remove any potentially harmful characters
    path="${path//[^a-zA-Z0-9._/-]/}"
    # Ensure path doesn't contain ..
    if [[ "$path" == *".."* ]]; then
        echo "Invalid file path"
        return 1
    fi
    echo "$path"
    return 0
}

# Script validation
validate_script() {
    local script="$1"
    # Only allow known safe scripts
    local valid_scripts=(
        "banner"
        "broadcast-listener"
        "http-enum"
        "http-userdir-enum"
        "ftp-brute"
        "mysql-databases"
        "mysql-brute"
        "mysql-empty-password"
        "mysql-enum"
        "mysql-users"
        "smtp-brute"
        "smtp-strangeport"
    )
    
    for valid_script in "${valid_scripts[@]}"; do
        if [[ "$script" == "$valid_script" ]]; then
            return 0
        fi
    done
    echo "Invalid script specified"
    return 1
}

validate_yes_no() {
    local input="$1"
    input=$(echo "$input" | tr '[:upper:]' '[:lower:]')
    if [[ "$input" =~ ^[yn]$ ]]; then
        echo "$input"
        return 0
    fi
    echo -e "\033[31mError: Invalid input '$input'. Please enter 'y' or 'n' only.\033[0m"
    return 1
}

validate_menu_choice() {
    local input="$1"
    local max="$2"
    if [[ "$input" =~ ^[0-9]+$ ]] && [ "$input" -ge 1 ] && [ "$input" -le "$max" ]; then
        return 0
    fi
    echo "Invalid selection. Please enter a number between 1 and $max."
    return 1
}

sanitize_command() {
    local cmd="$1"
    cmd="${cmd//[;&|<>]}"
    echo "$cmd"
}

# Add signal handling and cleanup function
cleanup() {
    echo -e "\nExiting EasyMap..."
    exit 0
}

trap cleanup SIGINT SIGTERM

# Initialize variables with safe defaults
 scan_command=""
 selected_script=""
 file_path=""
 port_range=""
 target=""

# Add timeout function for reads
read_with_timeout() {
    local prompt="$1"
    local var_name="$2"
    local timeout=60
    
    echo -e "$prompt"
    echo -n "=>"
    if ! read -r -t "$timeout" "$var_name"; then
        echo -e "\nInput timeout reached. Exiting."
        exit 1
    fi
}

# Modified check-for-nmap function
check-for-nmap(){
    if ! command -v nmap &> /dev/null; then
        echo "nmap is not installed. Do you want to install it? (yes/no)"
        read -r response
        response=$(echo "$response" | tr '[:upper:]' '[:lower:]')
        if [[ "$response" == "yes" ]]; then
            if command -v apt-get &> /dev/null; then
                sudo apt-get update && sudo apt-get install -y nmap
            elif command -v yum &> /dev/null; then
                sudo yum install -y nmap
            elif command -v brew &> /dev/null; then
                brew install nmap
            else
                echo "Unsupported package manager. Please install nmap manually."
                exit 1
            fi
        else
            echo "nmap is required to run this script. Exiting."
            exit 1
        fi
    fi
}

check-for-nmap

clear

print-header(){
echo " ______                __  __             "
echo "|  ____|              |  \/  |            "
echo "| |__   __ _ ___ _   _| \  / | __ _ _ __  "
echo "|  __| / _  / __| | | | |\/| |/ _  |  _ \""
echo "| |___| (_| \__ \ |_| | |  | | (_| | |_) |"
echo "|______\__,_|___/\__, |_|  |_|\__,_| .__/ "
echo "                  __/ |            | |    "
echo "                 |___/             |_|    "
}

print-header

print-welcome(){
    echo "Welcome to EasyMap, a simple nmap helper tool!"
    echo "This tool will guide you through the process of performing an nmap scan.\n"

    while true; do
        echo -e "\nDo you want to use SUDO for this command? (y/n)"
        echo -n "=>"
        read -r -t 60 super_user_do || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$super_user_do"); then
            super_user_do="$response"
            break
        fi
    done

    scan_command=""
    if [[ "$super_user_do" == "y" ]]; then
        scan_command="sudo "
    fi

    while true; do
        echo -e "\nEnter the target IP address or hostname: "
        echo -n "=>"
        read -r -t 60 target || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if validate_target "$target"; then
            break
        fi
    done

    echo -e "\nSelect the type of scan you want to perform:"
    echo "1. TCP SYN scan (Fast and reliable, sends a SYN packet and waits for a response)"
    echo "2. UDP scan (Scans for open UDP ports, can be slow and unreliable)"
    echo "3. TCP connect scan (Establishes a full TCP connection, can be slow and detectable)"
    echo "4. ACK scan (Sends an ACK packet to determine if a port is open or filtered)"
    echo "5. TCP Null scan (Sends a TCP packet with no flags set, can be used to evade firewalls)"
    echo "6. TCP FIN scan (Sends a TCP packet with the FIN flag set, can be used to evade firewalls)"
    echo "7. TCP Xmas scan (Sends a TCP packet with the FIN, URG, and PSH flags set, can be used to evade firewalls)"
    echo "8. TCP ACK scan (Sends an ACK packet to determine if a port is open or filtered, similar to ACK scan)"

    while true; do
        echo -n "=>"
        read -r -t 60 scan_type || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if validate_menu_choice "$scan_type" 8; then
            break
        fi
    done
}

print-welcome

print-options(){
    clear
    print-header
    
    while true; do
        echo -e "\nDo you want to specify custom ports? (y/n)"
        echo -n "=>"
        read -r -t 60 custom_ports || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$custom_ports"); then
            custom_ports="$response"
            break
        fi
        sleep 1  # Give user time to read error message
    done
    
    if [[ "$custom_ports" == "y" ]]; then
        while true; do
            echo "Enter the port range (e.g., 1-1024): "
            echo -n "=>"
            read -r -t 60 port_range || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
            if validate_port_range "$port_range"; then
                break
            fi
            sleep 1
        done
    fi

    while true; do
        echo -e "\nDo you want to perform OS detection? (y/n)"
        echo -n "=>"
        read -r -t 60 os_detection || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$os_detection"); then
            os_detection="$response"
            break
        fi
        sleep 1
    done

    while true; do
        echo -e "\nDo you want to perform version detection? (y/n)"
        echo -n "=>"
        read -r -t 60 version_detection || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$version_detection"); then
            version_detection="$response"
            break
        fi
        sleep 1
    done

    while true; do
        echo -e "\nDo you want to use firewall/IDS evasion techniques? (y/n)"
        echo -n "=>"
        read -r -t 60 evasion || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$evasion"); then
            evasion="$response"
            break
        fi
        sleep 1
    done

    while true; do
        echo -e "\nDo you want to skip host? This is assume all hosts are live. (y/n)"
        echo -n "=>"
        read -r -t 60 host_discovery || { echo -e "\nInput timeout reached. Exiting."; exit 1; }
        if response=$(validate_yes_no "$host_discovery"); then
            host_discovery="$response"
            break
        fi
        sleep 1
    done
}

print-options

print-speed(){
    clear
    print-header
    echo -e "\nSelect the scan speed:"
    echo "1. Paranoid (very slow, -T0)"
    echo "2. Sneaky (slow, -T1)"
    echo "3. Polite (medium, -T2)"
    echo "4. Normal (fast, -T3)"
    echo "5. Aggressive (very fast, -T4)"
    echo "6. Insane (extremely fast, -T5)"
    read -p "Enter your choice: " scan_speed
}

print-speed

if [ "$host_discovery" = "y" ]; then
   scan_command+="nmap -Pn"
else
   scan_command+="nmap"
fi

case $scan_type in
  1) scan_command+=" -sS $target" ;;
  2) scan_command+=" -sU $target" ;;
  3) scan_command+=" -sT $target" ;;
  4) scan_command+=" -sA $target" ;;
  5) scan_command+=" -sN $target" ;;
  6) scan_command+=" -sF $target" ;;
  7) scan_command+=" -sX $target" ;;
  8) scan_command+=" -sA $target" ;;
esac

print-scripts(){
    clear
    print-header
    
    echo -e "\nDo you want to use a script? (y/n)"
    echo -n "=>"
    read -r scripts
    scripts=$(echo "$scripts" | tr '[:upper:]' '[:lower:]')

    if [[ "$scripts" == "y" ]]; then
        echo -e "\nChoose a script to use:"
        echo "1. Banner (A simple banner grabber which connects to an open TCP port and prints out anything sent by the listening service within five seconds.)"
        echo "2. Broadcast Listener (Sniffs the network for incoming broadcast communication and attempts to decode the received packets.)"
        echo "3. FTP Anon (Checks if an FTP server allows anonymous logins.)"
        echo "4. HTTP Enum (Enumerates directories used by popular web applications and servers.)"
        echo "5. HTTP UserDir Enum (Attempts to enumerate valid usernames on web servers running with the mod_userdir module or similar enabled.)"
        echo "6. FTP Brute (Performs brute force password auditing against FTP servers.)"
        echo "7. MySQL Databases (Attempts to list all databases on a MySQL server.)"
        echo "8. MySQL Brute (Performs password guessing against MySQL.)"
        echo "9. MySQL Empty Password (Checks for MySQL servers with an empty password for root or anonymous.)"
        echo "10. MySQL Enum (Performs valid-user enumeration against MySQL.)"
        echo "11. MySQL Users (Attempts to list all users on a MySQL server.)"
        echo "12. SMTP Brute (Performs brute force password auditing against SMTP servers using either LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5 or NTLM authentication.)"
        echo "13. SMTP Strange Port (Checks if SMTP is running on a non-standard port.)"
        echo -n "=>"
        read -r selected_script
        
        if ! [[ "$selected_script" =~ ^[0-9]+$ ]]; then
            echo "Invalid selection"
            exit 1
        fi
    fi
}

print-scripts

print-output(){
    echo -e "\nDo you want to print the output to a file? (y/n)"
    echo -n "=>"
    read -r use_output_file
    use_output_file=$(echo "$use_output_file" | tr '[:upper:]' '[:lower:]')

    if [[ "$use_output_file" == "y" ]]; then
        while true; do
            read -r -p "File Path: " file_path
            validated_path=$(validate_file_path "$file_path")
            if [[ $? -eq 0 ]]; then
                file_path="$validated_path"
                break
            fi
            echo "Please enter a valid file path."
        done
    fi
}

print-output

if [ "$custom_ports" = "y" ]; then
  scan_command+=" -p $port_range"
fi

if [ "$os_detection" = "y" ]; then
  scan_command+=" -O"
fi

if [ "$version_detection" = "y" ]; then
  scan_command+=" -sV"
fi

if [ "$evasion" = "y" ]; then
  scan_command+=" -f"
fi

case $scan_speed in
  1) scan_command+=" -T0" ;;
  2) scan_command+=" -T1" ;;
  3) scan_command+=" -T2" ;;
  4) scan_command+=" -T3" ;;
  5) scan_command+=" -T4" ;;
  6) scan_command+=" -T5" ;;
esac

case $selected_script in
  1) scan_command+=" --script=banner";;
  2) scan_command+=" --script=broadcast-listener";;
  3) scan_command+=" -sC";;
  4) scan_command+=" --script=http-enum";;
  5) scan_command+=" --script=http-userdir-enum";;
  6) scan_command+=" --script=ftp-brute";;
  7) scan_command+=" --script=mysql-databases";;
  8) scan_command+=" --script=mysql-brute";;
  9) scan_command+=" --script=mysql-empty-password";;
 10) scan_command+=" --script=mysql-enum";;
 11) scan_command+=" --script=mysql-users";;
 12) scan_command+=" -p 25 --script=smtp-brute";;
 13) scan_command+=" --script=smtp-strangeport";;
esac

if [ -n "$file_path" ]; then
  scan_command+=" -oN $file_path"
fi

# Before executing the final command
scan_command=$(sanitize_command "$scan_command")

# Add error handling for command execution
if ! eval "$scan_command"; then
    echo "Error executing nmap command"
    exit 1
fi

echo -e "\nRunning command: $scan_command"
echo -e "\n\033[1m--------------OUTPUT--------------\033[0m"
$scan_command

echo -e "\n\nScan complete! Thanks for using EasyMap."
